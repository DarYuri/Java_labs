package ru.spbstu.telematics.student_Darienko.lab_04_chat_client;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

public class ChatClientGUI extends javax.swing.JFrame {

    private ChatClientCore clientCore_;
	//client.registerInChat();
	//client.chattingProcess();

	/** Creates new form ChatClientGUI */
    public ChatClientGUI() {
        initComponents();
        clientCore_ = new ChatClientCore(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
    	this.setTitle("Java chat (disconnected)");
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        sendMessageText_ = new javax.swing.JTextArea();
        sendButton_ = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        chatTextArea_ = new javax.swing.JTextArea();
        serverAddressField_ = new javax.swing.JTextField();
        serverAddressLabel_ = new javax.swing.JLabel();
        nicknameLabel_ = new javax.swing.JLabel();
        nicknameField_ = new javax.swing.JTextField();
        connectButton_ = new javax.swing.JButton();

        serverAddressField_.setText("localhost");
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        sendMessageText_.setColumns(20);
        sendMessageText_.setRows(5);
        jScrollPane2.setViewportView(sendMessageText_);
        sendMessageText_.addKeyListener(new KeyboardEventAdapter());
        sendButton_.setText("SEND");
        sendButton_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButton_ActionPerformed(evt);
            }
        });

        chatTextArea_.setColumns(20);
        chatTextArea_.setRows(5);
        jScrollPane3.setViewportView(chatTextArea_);
        chatTextArea_.setEditable(false);
        serverAddressLabel_.setText("Server address:");

        nicknameLabel_.setText("Nickname:");

        connectButton_.setText("Connect");
        connectButton_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButton_ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendButton_, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(serverAddressLabel_)
                            .addComponent(nicknameLabel_))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nicknameField_, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                            .addComponent(serverAddressField_, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(connectButton_, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(serverAddressLabel_)
                            .addComponent(serverAddressField_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nicknameField_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nicknameLabel_)))
                    .addComponent(connectButton_, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sendButton_, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        pack();
    }
    private void sendButton_ActionPerformed(java.awt.event.ActionEvent evt) {
    	if ((clientCore_.isConnected_)&&(!this.sendMessageText_.getText().isEmpty()))
    	{
    		clientCore_.messagesListLock_.lock();
    		try
    		{
    			clientCore_.messagesToSendList_.add(sendMessageText_.getText());
    		} finally {clientCore_.messagesListLock_.unlock();}
    		sendMessageText_.setText("");
    	}
    }

    private void connectButton_ActionPerformed(java.awt.event.ActionEvent evt)
    {
    	if (clientCore_.isConnected_)
    		return; // если коннект есть - ничего не делать
    	String serverAddress=serverAddressField_.getText();
    	if (serverAddress.isEmpty())
    	{	// если пуста строка адреса сервера
    		chatTextArea_.setText("Server network address field is empty!\nPlease, enter server network address!");
    		return;
    	}
    	String nickname = nicknameField_.getText();
    	
    	if (nickname.isEmpty())
    	{	// если пуста строка с ником
    		chatTextArea_.setText("Nickname field is empty!\nPlease, enter preferred nickname to enter this chat!");
    		return;
		}
    	if (!clientCore_.setUpConnection(serverAddress))
    	{	// если коннект обломился
    		chatTextArea_.setText("Connection to server has been failed due to network error!");
    		return;
    	}
		
    	if (!clientCore_.registerInChat(nickname))
    	{	// если обломилась рега
    		chatTextArea_.setText("Nick registration failed! This nick is in use!");
    		clientCore_.disconnect();
    		return;
    	}
    	// если все - ок
    	this.setTitle("Java chat (connected as "+ nickname+")");
    	chatTextArea_.setText("Welcome to java chat!");
    	clientCore_.isConnected_=true;
    	new Thread(clientCore_).start();
    }
    
    private class KeyboardEventAdapter extends KeyAdapter
	{
		public void keyPressed(KeyEvent event)
		{
			if (event.getKeyCode() == event.VK_ENTER)
			{
				if (event.isControlDown())
					ChatClientGUI.this.sendMessageText_.append("\n");
				else
					sendButton_ActionPerformed(null);    		
			}
			event.consume();
		}
		
	}

    public javax.swing.JTextArea chatTextArea_;
    private javax.swing.JButton connectButton_;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField nicknameField_;
    private javax.swing.JLabel nicknameLabel_;
    private javax.swing.JButton sendButton_;
    private javax.swing.JTextArea sendMessageText_;
    private javax.swing.JTextField serverAddressField_;
    private javax.swing.JLabel serverAddressLabel_;
    
}
